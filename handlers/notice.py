import asyncio
from random import randint
import json

from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest, TelegramForbiddenError
from aiogram import F

from loader import dp, bot
from storage import db_manage
from filters import IsAdmin
from keyboards import about_users_bot
from utils import State_Mailing


# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤
@dp.message(F.text == about_users_bot, IsAdmin())
async def show_info_about_users_bot(message: Message, state: FSMContext):
    await state.clear()

    all_users = await db_manage.count_users()

    text = f'<b>üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b>\n{all_users}'

    await message.answer(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üì® –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='mailing')],
            [InlineKeyboardButton(text='‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å id', callback_data='down_users_id')]
        ])
    )


# –í—ã–≥—Ä—É–∑–∫–∞ id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(F.data == 'down_users_id', IsAdmin())
async def down_users_id(query: CallbackQuery, state: FSMContext):
    users_id = await db_manage.get_users_id()

    users_id_str = ''
    for user_id in users_id:
        users_id_str += f'{user_id[0]}\n'

    await query.message.answer_document(
        document=BufferedInputFile(
            file=users_id_str.encode(),
            filename='users.txt'
        )
    )


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ 
@dp.callback_query(F.data == 'mailing', IsAdmin())
async def setting_mailing(query: CallbackQuery, state: FSMContext):
    await state.set_state(State_Mailing.msg)
    
    await query.message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='stop_mailing')]
        ])
    )

# –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == 'stop_mailing', IsAdmin())
async def stop_mailing(query: CallbackQuery, state: FSMContext):
    await show_info_about_users_bot(query.message, state)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—ã–ª–∫–∏
@dp.message(State_Mailing.msg, IsAdmin())
async def take_msg_mailing(message: Message, state: FSMContext):    
    users = await db_manage.get_users_id()
    text_buttons = []
    urls = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    async def bulding_keyboard():
        builder = InlineKeyboardBuilder()
        
        if text_buttons:
            for text_button, url in zip(text_buttons, urls):
                builder.button(text=text_button, url=url)
        
        builder.button(text='‚ñ∂Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É', callback_data='add_button')
        builder.button(text='üì§ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='confirm_start_mailing')
        builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='stop_mailing')

        builder.adjust(1)

        return builder.as_markup()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç
    async def send_settings_mailing(keyboard):
        await bot.copy_message(
            chat_id=message.from_user.id,
            from_chat_id=message.from_user.id,
            message_id=message.message_id,
            reply_markup=keyboard
        )

    keyboard = await bulding_keyboard()
    await send_settings_mailing(keyboard)


    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    @dp.callback_query(F.data == 'add_button', IsAdmin())
    async def add_button(query: CallbackQuery, state: FSMContext):
        await state.set_state(State_Mailing.add_button)
        
        await query.message.answer(
            text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - https://example'
        )


    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    @dp.message(State_Mailing.add_button, IsAdmin())
    async def take_button_text(message: Message, state: FSMContext):                
        raw_text = message.text.split('-')
        button_text = raw_text[0].strip()
        url = raw_text[1].strip()

        text_buttons.append(button_text)
        urls.append(url)

        keyboard = await bulding_keyboard()
        await send_settings_mailing(keyboard)

    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    @dp.callback_query(F.data == 'confirm_start_mailing', IsAdmin())
    async def confirm_start_mailing(query: CallbackQuery, state: FSMContext):
        await query.message.answer(
            text=f'–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n–†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {round(len(users)*0.05, 0)}',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚úÖ –ù–∞—á–∞—Ç—å', callback_data='start_mailing')],
                [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='stop_mailing')]
            ])
        )

    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    @dp.callback_query(F.data == 'start_mailing', IsAdmin())
    async def start_mailing(query: CallbackQuery, state: FSMContext):
        builder = InlineKeyboardBuilder()
        if text_buttons:
            for text_button, url in zip(text_buttons, urls):
                builder.button(text=text_button, url=url)
            builder.adjust(1)
        
        # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        ind = round(len(users)/5, 0)
        if ind == 0:
            ind = 1


        count_msg = []
        for index, user in enumerate(users):
            if index % ind == 0:
                await message.answer(text=f'–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ {int(index/ind*20)}%')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            async def send_msg():
                try:
                    await bot.copy_message(
                        chat_id=user[0],
                        from_chat_id=message.from_user.id,
                        message_id=message.message_id,
                        reply_markup=builder.as_markup()
                    )
                    
                    count_msg.append(1)
                    print(f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {index + 1}')
                
                except TelegramRetryAfter as e:
                    print('–û—à–±–∏–∫–∞ –ø–æ–ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑', e.retry_after)
                    await asyncio.sleep(e.retry_after)
                    await send_msg()
                
                except TelegramBadRequest as e:
                    print(e)
                
                except TelegramForbiddenError as e:
                    print(e)

            await send_msg()
            await asyncio.sleep(1/20)

        count_msg_len = len(count_msg)
        await message.answer(
            text=f'<b>–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ: {count_msg_len}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {len(users)-count_msg_len}'
        )